plot(g1, edge.label=round(E(g1)$weight, 1))
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight,
vertex.label.font=5)
### Distribuição de Graus
d1 = degree.distribution(g1, cumulative=FALSE)
len = length(d1)
png(filename="G1_graus.png", height=500, width=500, bg="white")
barplot(d1, main="Distribuição de Graus", xlab="Graus", ylab="PDF", names.arg=c(0:(len-1)))
dev.off()
### Proximidade dos Vértices
cl = closeness(g1)
cl
### Vértice com maior grau
cl_max= max(cl)
cl_max
vindex_max = which(closeness(g1) == cl_max)
vindex_max
vmax=V(g1)[vindex_max]$id
vmax
### Vértice com menor grau
cl_min= min(cl)
cl_min
vindex_min = which(closeness(g1) == cl_min)
vindex_min
vmin=V(g1)[vindex_min]$id
vmin
### Máxima distância mínima entre Vértices
b = betweenness(g1)
bmax=max(b)
bmax
bindex_max = which(betweenness(g1) == bmax)
bindex_max
bmax=V(g1)[bindex_max]$id
bmax
bmin= min(b)
bmin
bindex_min = which(betweenness(g1) == bmin)
bindex_min
bmin=V(g1)[bindex_min]$id
bmin
### Arestas
vcount(g1)
ecount(g1)
E(g1)
eb = edge.betweenness(g1)
eb
### Caminho mais curto
distances(g1)
plot(g1, edge.label=round(E(g1)$weight, 1))
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 1)
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 3)
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight)
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight)
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 3),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 5),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 1),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, edge.label.font = 3),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 3),
vertex.label.font=5)
tkplot(g1)
library(timeordered)
install.packages("timeordered")
library(dplyr)
library(igraph)
library(timeordered)
### Pacotes
install.packages("dplyr")
install.packages("plyr")
install.packages("igraph")
install.packages("timeordered")
### Bibliotecas
library(dplyr)
library(plyr)
library(igraph)
library(timeordered)
install.packages("dplyr")
generatetonetwork(g1)
library(timeordered)
generatetonetwork(g1)
### Bibliotecas
library(dplyr)
library(plyr)
library(igraph)
library(timeordered)
### Consciência situacional
setwd('/Users/sidneibarbieri/Documents/Grafos/IntroGrafos/')
getwd()
g1 = read_graph("./G1.net", format = c("pajek"))
g1
### Plotar o Grafo G1
plot(g1)
plot(g1, vertex.size=40, vertex.color="orange", edge.color="darkblue", edge.width=2, vertex.label.font=5)
names = V(g1)$id
names
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 3),
vertex.label.font=5)
### Distribuição de Graus
d1 = degree.distribution(g1, cumulative=FALSE)
len = length(d1)
png(filename="G1_graus.png", height=500, width=500, bg="white")
barplot(d1, main="Distribuição de Graus", xlab="Graus", ylab="PDF", names.arg=c(0:(len-1)))
dev.off()
### Proximidade dos Vértices
cl = closeness(g1)
cl
### Vértice com maior grau
cl_max= max(cl)
cl_max
vindex_max = which(closeness(g1) == cl_max)
vindex_max
vmax=V(g1)[vindex_max]$id
vmax
### Vértice com menor grau
cl_min= min(cl)
cl_min
vindex_min = which(closeness(g1) == cl_min)
vindex_min
vmin=V(g1)[vindex_min]$id
vmin
### Máxima distância mínima entre Vértices
b = betweenness(g1)
bmax=max(b)
bmax
bindex_max = which(betweenness(g1) == bmax)
bindex_max
bmax=V(g1)[bindex_max]$id
bmax
bmin= min(b)
bmin
bindex_min = which(betweenness(g1) == bmin)
bindex_min
bmin=V(g1)[bindex_min]$id
bmin
### Arestas
vcount(g1)
ecount(g1)
E(g1)
eb = edge.betweenness(g1)
eb
### Caminho mais curto
distances(g1)
generatetonetwork(g1)
V(g1)
E(g1)
g1[]
g1[1,]
g1[3,]
g1[5,]
V(g1)$name
E(g1)$name
E(g1)$weight
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.arrow.size=.5,
edge.width=2,
edge.label=round(E(g1)$weight, 3),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.arrow.size=5,
edge.width=2,
edge.label=round(E(g1)$weight, 3),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
edge.label=round(E(g1)$weight, 3),
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="orange",
edge.color="darkblue",
edge.width=2,
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="green",
edge.color="darkblue",
edge.width=2,
vertex.label.font=5)
plot(g1, vertex.label=names,
vertex.size=40,
vertex.color="yellow",
edge.color="darkblue",
edge.width=2,
vertex.label.font=5)
cliques(g1)
coreness(g1)
coreness(g1, mode="all"))
coreness(g1, mode="all")
g2 <- graph( edges = c(1,2, 2,3, 3, 1), n=3, directed=F )
plot(g2)
g2 <- graph( edges = c(1,2, 1,3, 2,3, 3,4, 4,5), n=5, directed=F)
plot(g2)
plot(g2, vertex.size=40, vertex.color="orange", edge.color="darkblue", edge.width=2, vertex.label.font=5)
g2 <- graph( edges = c(1,2,
1,3,
2,3,
3,4,
4,5), n=5, directed=F)
g2 <- graph( edges = c(1,2,
1,3,
2,3,
3,4,
4,5),
n=5, directed=F)
edge_attr(g1)
edge_attr(g2)
edge_attr(g1)
E(g1)$weight
edge_attr(g1)
E(g1)$weight
edge_attr(g2)
E(g2)$weight <- 1
edge_attr(g2)
g1[]
g2[]
vertex_attr(g1)
vertex_attr(g2)
g1[1,]
V(g2)
V(g1)$name
vertex_attr(g1)
V(g2)$name
V(g2)$name <- c(1, 2, 3, 4, 5)
vertex_attr(g1)
vertex_attr(g2)
V(g2)$name <- c("1", "2", "3", "4", "5")
vertex_attr(g1)
vertex_attr(g2)
coreness(g1, mode="all")
graph_from_incidence_matrix(g1)
head(g1)
head(g2)
g2 <- simplify(g2, remove.multiple = F, remove.loops = T)
g2
g1 <- simplify(g1, remove.multiple = F, remove.loops = T)
g1
as_edgelist(g2, names=T)
as_adjacency_matrix(g2, attr="weight")
as_data_frame(g2, what="edges")
as_data_frame(g1, what="edges")
as_data_frame(g2, what="vertices")
net2 <- graph_from_incidence_matrix(g2)
graph_from_incidence_matrix(g2)
graph_from_incidence_matrix(g1)
degree(g2)
as_edgelist(g2, names=T)
V(g2)$coef
V(g2)$coef <- 0
V(g2)$coef
degree(g2)
degree(g2$1)
grau <- degree(g2)
grau
grau$1
grau[1]
grau[1,2]
as.data.frame(grau)
grau$1
grau[1]
grau[1,1]
grau[1,2]
grau[1,[2]]
grau[1,[]]
grau[[1]]
eb
ecount(g1)
E(g1)
vcount(g1)
coreness(g1, mode="all")
distances(g1)
E(g2)
E(g2, 2)
bmin
bindex_min
bmax
b = betweenness(g1)
bmax=max(b)
bmax
bindex_max = which(betweenness(g1) == bmax)
bindex_max
vindex_min = which(closeness(g1) == cl_min)
vindex_min
vmin=V(g1)[vindex_min]$id
vmin
cl_min= min(cl)
cl_min
cl_max= max(cl)
cl_max
vindex_max = which(closeness(g1) == cl_max)
vindex_max
vmax=V(g1)[vindex_max]$id
vmax
d1 = degree.distribution(g1, cumulative=FALSE)
len = length(d1)
len
d1
edge_attr(g2)
c1 = 2*1/(grau[[1]]*(grau[[1]]-1))
c1
c1 = 2*1/(grau[[1]]*(grau[[1]]-1))
c2 = 2*1/(grau[[2]]*(grau[[2]]-1))
c3 = 2*1/(grau[[3]]*(grau[[3]]-1))
c4 = 2*0/(grau[[4]]*(grau[[4]]-1))
c5 = 2*0/(grau[[5]]*(grau[[5]]-1))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
V(g2)$coef <- int(0)
V(g2)$coef <- as.integer(0)
c1 = 2*1/(grau[[1]]*(grau[[1]]-1))
c2 = 2*1/(grau[[2]]*(grau[[2]]-1))
c3 = 2*1/(grau[[3]]*(grau[[3]]-1))
c4 = 2*0/(grau[[4]]*(grau[[4]]-1))
c5 = 2*0/(grau[[5]]*(grau[[5]]-1))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
V(g2)$coef <- 0
c1 = 2*1/(grau[[1]]*(grau[[1]]-1))
c2 = 2*1/(grau[[2]]*(grau[[2]]-1))
c3 = 2*1/(grau[[3]]*(grau[[3]]-1))
c4 = 2*0/(grau[[4]]*(grau[[4]]-1))
c5 = 2*0/(grau[[5]]*(grau[[5]]-1))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
c1 = (2*1/(grau[[1]]*(grau[[1]]-1)))
c2 = (2*1/(grau[[2]]*(grau[[2]]-1)))
c3 = (2*1/(grau[[3]]*(grau[[3]]-1)))
c4 = (2*0/(grau[[4]]*(grau[[4]]-1)))
c5 = (2*0/(grau[[5]]*(grau[[5]]-1)))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
as.double(V(g2)$coef)
V(g2)$coef <- 0
V(g2)$coef
as.double(V(g2)$coef)
c1 = (2*1/(grau[[1]]*(grau[[1]]-1)))
c2 = (2*1/(grau[[2]]*(grau[[2]]-1)))
c3 = (2*1/(grau[[3]]*(grau[[3]]-1)))
c4 = (2*0/(grau[[4]]*(grau[[4]]-1)))
c5 = (2*0/(grau[[5]]*(grau[[5]]-1)))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
c1 = as.double(2*1/(grau[[1]]*(grau[[1]]-1)))
c2 = as.double(2*1/(grau[[2]]*(grau[[2]]-1)))
c3 = as.double(2*1/(grau[[3]]*(grau[[3]]-1)))
c4 = as.double(2*0/(grau[[4]]*(grau[[4]]-1)))
c5 = as.double(2*0/(grau[[5]]*(grau[[5]]-1)))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
grau[[5]]
grau[[5]]-1
grau[[5]]*(grau[[5]]-1
(grau[[5]]*(grau[[5]]-1)
c5 = as.double(2*0/(grau[[5]]*((grau[[5]]-1)))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
c5 = as.double((2*0)/((grau[[5]])*(grau[[5]]-1)))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
c5 = as.double((2*0)/(grau[[5]])*(grau[[5]]-1))
V(g2)$coef <- c(c1, c2, c3, c4, c5)
V(g2)$coef
c1 = as.double((2*1)/(grau[[1]])*(grau[[1]]-1))
c2 = as.double((2*1)/(grau[[2]])*(grau[[2]]-1))
c3 = as.double((2*1)/(grau[[3]])*(grau[[3]]-1))
c4 = as.double((2*0)/(grau[[4]])*(grau[[4]]-1))
c5 = as.double((2*0)/(grau[[5]])*(grau[[5]]-1))
mcm <- distances(g1)
as.data.frame(mcm)
mcm <- as.data.frame(mcm)
mcm[1,]
l1 <- sum(mcm[1,])
l1
V(g1)
N <- sum(V(g2))
N
N <- count(V(g2))
cl_min= min(cl)
cl_min
vindex_min = which(closeness(g1) == cl_min)
vindex_min
vindex_min
vmin=V(g1)[vindex_min]$id
vmin
l1 <- sum(mcm[1,])/
?count
l1 <- sum(mcm[1,])/
help("count")
coreness(g1, mode="all")
g2 <- simplify(g2, remove.multiple = F, remove.loops = T)
as_edgelist(g2, names=T)
as_adjacency_matrix(g2, attr="weight")
distances(g1)
l1 <- sum(mcm[1,])/(5-1)
l1 <- sum(mcm[1,])/(5-1)
l2 <- sum(mcm[2,])/(5-1)
l3 <- sum(mcm[3,])/(5-1)
l4 <- sum(mcm[4,])/(5-1)
l5 <- sum(mcm[5,])/(5-1)
l1
average.path.length(g2)
average.path.length(g2$1)
average.path.length(g2[1])
average.path.length(mcm[1,])
g2
average.path.length(V(g2))
average.path.length(g2)
diameter(g2)
shortest_paths(graph, from, to = V(g2)
avera
### Diâmetro
diameter(g2)
shortest_paths(graph, from, to = V(g2))
shortest_paths(g2, 1, to = 2)
mean_distance(g2, directed = FALSE, unconnected = FALSE)
distance_table(g2, directed = FALSE, unconnected = FALSE)
distance_table(g2)
distance_table(g2)
average.path.length(g2, directed = FALSE)
distance_table(g2, directed = FALSE)
all_shortest_paths(g2)
all_shortest_paths(g2, 1, to = 2)
all_shortest_paths(g2, 1, to = 5)
all_shortest_paths(g2, 1, to = 2)
all_shortest_paths(g2, 1, to = 2,  mode = c("out", "all", "in"),  weights = NULL)
all_shortest_paths(g2, 1, to = 5,  mode = c("out", "all", "in"),  weights = NULL)
all_shortest_paths(g2, 1, to = 5,  mode = c("in"),  weights = NULL)
all_shortest_paths(g2, 1, to = 2,  mode = c("in"),  weights = NULL)
distance_table(g2, directed = FALSE)
